// <auto-generated />
namespace Confiz.Commerce.RetailProxy.Extension
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.Dynamics.Commerce.RetailProxy;
    
    /// <summary>
    /// Class implements Store Operations Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class StoreOperationsManager : IStoreOperationsManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreOperationsManager"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public StoreOperationsManager(IContext context)
        {
            this.context = context;
        }
    
        
        /// <summary>
        /// BlockUnBlockServiceRequest method.
        /// </summary>
        /// <param name="memberId">The memberId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <param name="pointsValueToBlock">The pointsValueToBlock.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="staffId">The staffId.</param>
        /// <returns>int object.</returns>
        public async Task<int> BlockUnBlockServiceRequest(int memberId, string requestType, string pointsValueToBlock, string transactionId, string staffId)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<int>(
                "",
                "StoreOperations",
                "BlockUnBlockServiceRequest",
                true, null, OperationParameter.Create("memberId", memberId, false),
                  OperationParameter.Create("requestType", requestType, false),
                  OperationParameter.Create("pointsValueToBlock", pointsValueToBlock, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("StaffId", staffId, false));
        }
        
        /// <summary>
        /// GKSyncOfflineTransactionRequest method.
        /// </summary>
        /// <param name="transactionId">The transactionId.</param>
        /// <returns>string object.</returns>
        public async Task<string> GKSyncOfflineTransactionRequest(string transactionId)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "",
                "StoreOperations",
                "GKSyncOfflineTransactionRequest",
                true, null, OperationParameter.Create("transactionId", transactionId, false));
        }
        
        /// <summary>
        /// SearchProductsByTextAsync method.
        /// </summary>
        /// <param name="searchText">The searchText.</param>
        /// <param name="channelId">The channelId.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of ProductSearchResult.</returns>
        public async Task<PagedResult<ProductSearchResult>> SearchProductsByTextAsync(string searchText, long channelId, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<ProductSearchResult>(
                "",
                "StoreOperations",
                "SearchProductsByTextAsync",
                true, queryResultSettings, null, OperationParameter.Create("searchText", searchText, false),
                  OperationParameter.Create("channelId", channelId, false));
        }
        
    }
    
    /// <summary>
    /// Class implements CFZCustomer Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class CFZCustomerManager : ICFZCustomerManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="CFZCustomer"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public CFZCustomerManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<CFZCustomer> Create(CFZCustomer entity)
        {
            return await this.context.Create<CFZCustomer>("CFZCustomer", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="unusualEntityId">The unusualEntityId.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<CFZCustomer> Read(long unusualEntityId, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<CFZCustomer>(
                    "CFZCustomer",
                    e => e.UnusualEntityId == unusualEntityId,
                    expandProperties,
                    OperationParameter.Create("UnusualEntityId", unusualEntityId, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<CFZCustomer>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<CFZCustomer>("CFZCustomer", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<CFZCustomer> Update(CFZCustomer entity)
        {
            return await this.context.Update<CFZCustomer>("CFZCustomer", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(CFZCustomer entity)
        {
            await this.context.Delete<CFZCustomer>("CFZCustomer", entity);
        }
        
        // Operations
        
        /// <summary>
        /// InsertClearTaxLogAction method.
        /// </summary>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="qR">The qR.</param>
        /// <param name="pIH">The pIH.</param>
        /// <param name="uUID">The uUID.</param>
        /// <param name="request">The request.</param>
        /// <param name="response">The response.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="isOffline">The isOffline.</param>
        /// <param name="isError">The isError.</param>
        /// <param name="errors">The errors.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> InsertClearTaxLogAction(string receiptId, string qR, string pIH, string uUID, string request, string response, string transactionDate, int isOffline, bool isError, string errors, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "InsertClearTaxLogAction",
                true, null, OperationParameter.Create("ReceiptId", receiptId, false),
                  OperationParameter.Create("QR", qR, false),
                  OperationParameter.Create("PIH", pIH, false),
                  OperationParameter.Create("UUID", uUID, false),
                  OperationParameter.Create("Request", request, false),
                  OperationParameter.Create("Response", response, false),
                  OperationParameter.Create("TransactionDate", transactionDate, false),
                  OperationParameter.Create("IsOffline", isOffline, false),
                  OperationParameter.Create("IsError", isError, false),
                  OperationParameter.Create("Errors", errors, false),
                  OperationParameter.Create("RequestType", requestType, false));
        }
        
        /// <summary>
        /// GetTenderTypeValueAction method.
        /// </summary>
        /// <param name="saleOrder">The saleOrder.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetTenderTypeValueAction(SalesOrder saleOrder, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetTenderTypeValueAction",
                true, null, OperationParameter.Create("saleOrder", saleOrder, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetIfOrderExistsAction method.
        /// </summary>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetIfOrderExistsAction(string receiptId, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetIfOrderExistsAction",
                true, null, OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCredentialsAction method.
        /// </summary>
        /// <param name="salesOrder">The salesOrder.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCredentialsAction(SalesOrder salesOrder, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCredentialsAction",
                true, null, OperationParameter.Create("salesOrder", salesOrder, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCouponDiscountAction method.
        /// </summary>
        /// <param name="parmStatus">The parmStatus.</param>
        /// <param name="parmNetAmount">The parmNetAmount.</param>
        /// <param name="parmQty">The parmQty.</param>
        /// <param name="parmTransactionId">The parmTransactionId.</param>
        /// <param name="parmReceiptId">The parmReceiptId.</param>
        /// <param name="parmLine">The parmLine.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of Receipt.</returns>
        public async Task<PagedResult<Receipt>> GetCouponDiscountAction(string parmStatus, decimal parmNetAmount, decimal parmQty, string parmTransactionId, string parmReceiptId, CartLine parmLine, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<Receipt>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponDiscountAction",
                true, queryResultSettings, null, OperationParameter.Create("parmStatus", parmStatus, false),
                  OperationParameter.Create("parmNetAmount", parmNetAmount, false),
                  OperationParameter.Create("parmQty", parmQty, false),
                  OperationParameter.Create("parmTransactionId", parmTransactionId, false),
                  OperationParameter.Create("parmReceiptId", parmReceiptId, false),
                  OperationParameter.Create("parmLine", parmLine, false));
        }
        
        /// <summary>
        /// GetCouponValidationAction method.
        /// </summary>
        /// <param name="parmStatus">The parmStatus.</param>
        /// <param name="parmNetAmount">The parmNetAmount.</param>
        /// <param name="parmQty">The parmQty.</param>
        /// <param name="parmTransactionId">The parmTransactionId.</param>
        /// <param name="parmReceiptId">The parmReceiptId.</param>
        /// <param name="parmLine">The parmLine.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCouponValidationAction(string parmStatus, decimal parmNetAmount, decimal parmQty, string parmTransactionId, string parmReceiptId, CartLine parmLine)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponValidationAction",
                true, null, OperationParameter.Create("parmStatus", parmStatus, false),
                  OperationParameter.Create("parmNetAmount", parmNetAmount, false),
                  OperationParameter.Create("parmQty", parmQty, false),
                  OperationParameter.Create("parmTransactionId", parmTransactionId, false),
                  OperationParameter.Create("parmReceiptId", parmReceiptId, false),
                  OperationParameter.Create("parmLine", parmLine, false));
        }
        
        /// <summary>
        /// GetCouponsAction method.
        /// </summary>
        /// <param name="products">The products.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="returnTransactionId">The returnTransactionId.</param>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="storeId">The storeId.</param>
        /// <param name="terminalId">The terminalId.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="couponCode">The couponCode.</param>
        /// <param name="customerId">The customerId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of Receipt.</returns>
        public async Task<PagedResult<Receipt>> GetCouponsAction(string products, string transactionId, string returnTransactionId, string receiptId, string storeId, string terminalId, string transactionDate, string couponCode, string customerId, string requestType, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<Receipt>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponsAction",
                true, queryResultSettings, null, OperationParameter.Create("products", products, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("returnTransactionId", returnTransactionId, false),
                  OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("storeId", storeId, false),
                  OperationParameter.Create("terminalId", terminalId, false),
                  OperationParameter.Create("transactionDate", transactionDate, false),
                  OperationParameter.Create("couponCode", couponCode, false),
                  OperationParameter.Create("customerId", customerId, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCouponsValidationRedemptionDataAction method.
        /// </summary>
        /// <param name="products">The products.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="returnTransactionId">The returnTransactionId.</param>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="storeId">The storeId.</param>
        /// <param name="terminalId">The terminalId.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="couponCode">The couponCode.</param>
        /// <param name="customerId">The customerId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCouponsValidationRedemptionDataAction(string products, string transactionId, string returnTransactionId, string receiptId, string storeId, string terminalId, string transactionDate, string couponCode, string customerId, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponsValidationRedemptionDataAction",
                true, null, OperationParameter.Create("products", products, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("returnTransactionId", returnTransactionId, false),
                  OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("storeId", storeId, false),
                  OperationParameter.Create("terminalId", terminalId, false),
                  OperationParameter.Create("transactionDate", transactionDate, false),
                  OperationParameter.Create("couponCode", couponCode, false),
                  OperationParameter.Create("customerId", customerId, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCouponRedemptionDataAction method.
        /// </summary>
        /// <param name="products">The products.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="returnTransactionId">The returnTransactionId.</param>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="storeId">The storeId.</param>
        /// <param name="terminalId">The terminalId.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="couponCode">The couponCode.</param>
        /// <param name="customerId">The customerId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCouponRedemptionDataAction(string products, string transactionId, string returnTransactionId, string receiptId, string storeId, string terminalId, string transactionDate, string couponCode, string customerId, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponRedemptionDataAction",
                true, null, OperationParameter.Create("products", products, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("returnTransactionId", returnTransactionId, false),
                  OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("storeId", storeId, false),
                  OperationParameter.Create("terminalId", terminalId, false),
                  OperationParameter.Create("transactionDate", transactionDate, false),
                  OperationParameter.Create("couponCode", couponCode, false),
                  OperationParameter.Create("customerId", customerId, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCouponsValidationReturnDataAction method.
        /// </summary>
        /// <param name="products">The products.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="returnTransactionId">The returnTransactionId.</param>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="storeId">The storeId.</param>
        /// <param name="terminalId">The terminalId.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="couponCode">The couponCode.</param>
        /// <param name="customerId">The customerId.</param>
        /// <param name="orderType">The orderType.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCouponsValidationReturnDataAction(string products, string transactionId, string returnTransactionId, string receiptId, string storeId, string terminalId, string transactionDate, string couponCode, string customerId, string orderType, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponsValidationReturnDataAction",
                true, null, OperationParameter.Create("products", products, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("returnTransactionId", returnTransactionId, false),
                  OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("storeId", storeId, false),
                  OperationParameter.Create("terminalId", terminalId, false),
                  OperationParameter.Create("transactionDate", transactionDate, false),
                  OperationParameter.Create("couponCode", couponCode, false),
                  OperationParameter.Create("customerId", customerId, false),
                  OperationParameter.Create("orderType", orderType, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetCouponReturnDataAction method.
        /// </summary>
        /// <param name="products">The products.</param>
        /// <param name="transactionId">The transactionId.</param>
        /// <param name="returnTransactionId">The returnTransactionId.</param>
        /// <param name="receiptId">The receiptId.</param>
        /// <param name="storeId">The storeId.</param>
        /// <param name="terminalId">The terminalId.</param>
        /// <param name="transactionDate">The transactionDate.</param>
        /// <param name="couponCode">The couponCode.</param>
        /// <param name="customerId">The customerId.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetCouponReturnDataAction(string products, string transactionId, string returnTransactionId, string receiptId, string storeId, string terminalId, string transactionDate, string couponCode, string customerId, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetCouponReturnDataAction",
                true, null, OperationParameter.Create("products", products, false),
                  OperationParameter.Create("transactionId", transactionId, false),
                  OperationParameter.Create("returnTransactionId", returnTransactionId, false),
                  OperationParameter.Create("receiptId", receiptId, false),
                  OperationParameter.Create("storeId", storeId, false),
                  OperationParameter.Create("terminalId", terminalId, false),
                  OperationParameter.Create("transactionDate", transactionDate, false),
                  OperationParameter.Create("couponCode", couponCode, false),
                  OperationParameter.Create("customerId", customerId, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetItemData method.
        /// </summary>
        /// <param name="barcodeValue">The barcodeValue.</param>
        /// <param name="itemIdValue">The itemIdValue.</param>
        /// <param name="itemNameValue">The itemNameValue.</param>
        /// <param name="itemFormatValue">The itemFormatValue.</param>
        /// <param name="offersValue">The offersValue.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetItemData(string barcodeValue, string itemIdValue, string itemNameValue, string itemFormatValue, string offersValue, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetItemData",
                true, null, OperationParameter.Create("barcodeValue", barcodeValue, false),
                  OperationParameter.Create("itemIdValue", itemIdValue, false),
                  OperationParameter.Create("itemNameValue", itemNameValue, false),
                  OperationParameter.Create("itemFormatValue", itemFormatValue, false),
                  OperationParameter.Create("offersValue", offersValue, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// GetRuningOffersListData method.
        /// </summary>
        /// <param name="barcodeValue">The barcodeValue.</param>
        /// <param name="itemIdValue">The itemIdValue.</param>
        /// <param name="itemNameValue">The itemNameValue.</param>
        /// <param name="itemFormatValue">The itemFormatValue.</param>
        /// <param name="offersValue">The offersValue.</param>
        /// <param name="requestType">The requestType.</param>
        /// <returns>string object.</returns>
        public async Task<string> GetRuningOffersListData(string barcodeValue, string itemIdValue, string itemNameValue, string itemFormatValue, string offersValue, string requestType)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "CFZCustomer",
                "CFZCustomer",
                "GetRuningOffersListData",
                true, null, OperationParameter.Create("barcodeValue", barcodeValue, false),
                  OperationParameter.Create("itemIdValue", itemIdValue, false),
                  OperationParameter.Create("itemNameValue", itemNameValue, false),
                  OperationParameter.Create("itemFormatValue", itemFormatValue, false),
                  OperationParameter.Create("offersValue", offersValue, false),
                  OperationParameter.Create("requestType", requestType, false));
        }
        
        /// <summary>
        /// VoidPaymentOnVoidTransactionAsync method.
        /// </summary>
        /// <param name="cartId">The cartId.</param>
        /// <returns>Cart object.</returns>
        public async Task<Cart> VoidPaymentOnVoidTransactionAsync(string cartId)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<Cart>(
                "CFZCustomer",
                "CFZCustomer",
                "VoidPaymentOnVoidTransactionAsync",
                true, null, OperationParameter.Create("cartId", cartId, false));
        }
        
    }
    
    /// <summary>
    /// Class implements GKCustomerEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class GKCustomerEntityManager : IGKCustomerEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="GKCustomerEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public GKCustomerEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<GKCustomerEntity> Create(GKCustomerEntity entity)
        {
            return await this.context.Create<GKCustomerEntity>("GKCustomerEntity", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<GKCustomerEntity> Read(long id, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<GKCustomerEntity>(
                    "GKCustomerEntity",
                    e => e.Id == id,
                    expandProperties,
                    OperationParameter.Create("Id", id, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<GKCustomerEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<GKCustomerEntity>("GKCustomerEntity", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<GKCustomerEntity> Update(GKCustomerEntity entity)
        {
            return await this.context.Update<GKCustomerEntity>("GKCustomerEntity", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(GKCustomerEntity entity)
        {
            await this.context.Delete<GKCustomerEntity>("GKCustomerEntity", entity);
        }
        
        // Operations
        
        /// <summary>
        /// CreateUpdateCustomer method.
        /// </summary>
        /// <param name="lMSID">The lMSID.</param>
        /// <param name="mobileNumber">The mobileNumber.</param>
        /// <param name="searchName">The searchName.</param>
        /// <param name="email">The email.</param>
        /// <param name="legalEntity">The legalEntity.</param>
        /// <param name="firstName">The firstName.</param>
        /// <param name="lastName">The lastName.</param>
        /// <param name="gender">The gender.</param>
        /// <param name="dOB">The dOB.</param>
        /// <param name="profileCompleted">The profileCompleted.</param>
        /// <param name="nationality">The nationality.</param>
        /// <param name="residenceCountry">The residenceCountry.</param>
        /// <param name="residenceCity">The residenceCity.</param>
        /// <param name="memberTier">The memberTier.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of GKCustomerEntity.</returns>
        public async Task<PagedResult<GKCustomerEntity>> CreateUpdateCustomer(string lMSID, string mobileNumber, string searchName, string email, string legalEntity, string firstName, string lastName, string gender, string dOB, string profileCompleted, string nationality, string residenceCountry, string residenceCity, string memberTier, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<GKCustomerEntity>(
                "GKCustomerEntity",
                "GKCustomerEntity",
                "CreateUpdateCustomer",
                true, queryResultSettings, null, OperationParameter.Create("LMSID", lMSID, false),
                  OperationParameter.Create("MobileNumber", mobileNumber, false),
                  OperationParameter.Create("SearchName", searchName, false),
                  OperationParameter.Create("Email", email, false),
                  OperationParameter.Create("LegalEntity", legalEntity, false),
                  OperationParameter.Create("FirstName", firstName, false),
                  OperationParameter.Create("LastName", lastName, false),
                  OperationParameter.Create("Gender", gender, false),
                  OperationParameter.Create("DOB", dOB, false),
                  OperationParameter.Create("ProfileCompleted", profileCompleted, false),
                  OperationParameter.Create("Nationality", nationality, false),
                  OperationParameter.Create("ResidenceCountry", residenceCountry, false),
                  OperationParameter.Create("ResidenceCity", residenceCity, false),
                  OperationParameter.Create("MemberTier", memberTier, false));
        }
        
    }
    
    /// <summary>
    /// Class implements GKCouponCheckEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class GKCouponCheckEntityManager : IGKCouponCheckEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="GKCouponCheckEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public GKCouponCheckEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<GKCouponCheckEntity> Create(GKCouponCheckEntity entity)
        {
            return await this.context.Create<GKCouponCheckEntity>("GKCouponCheckEntity", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<GKCouponCheckEntity> Read(long id, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<GKCouponCheckEntity>(
                    "GKCouponCheckEntity",
                    e => e.Id == id,
                    expandProperties,
                    OperationParameter.Create("Id", id, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<GKCouponCheckEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<GKCouponCheckEntity>("GKCouponCheckEntity", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<GKCouponCheckEntity> Update(GKCouponCheckEntity entity)
        {
            return await this.context.Update<GKCouponCheckEntity>("GKCouponCheckEntity", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(GKCouponCheckEntity entity)
        {
            await this.context.Delete<GKCouponCheckEntity>("GKCouponCheckEntity", entity);
        }
        
        // Operations
        
        /// <summary>
        /// ApplyGKCoupon method.
        /// </summary>
        /// <param name="couponBarCode">The couponBarCode.</param>
        /// <param name="memberId">The memberId.</param>
        /// <param name="cartID">The cartID.</param>
        /// <param name="cartVersion">The cartVersion.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of GKCouponCheckEntity.</returns>
        public async Task<PagedResult<GKCouponCheckEntity>> ApplyGKCoupon(string couponBarCode, int memberId, string cartID, long cartVersion, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<GKCouponCheckEntity>(
                "GKCouponCheckEntity",
                "GKCouponCheckEntity",
                "ApplyGKCoupon",
                true, queryResultSettings, null, OperationParameter.Create("CouponBarCode", couponBarCode, false),
                  OperationParameter.Create("MemberId", memberId, false),
                  OperationParameter.Create("CartID", cartID, false),
                  OperationParameter.Create("CartVersion", cartVersion, false));
        }
        
        /// <summary>
        /// VoidGKCoupon method.
        /// </summary>
        /// <param name="couponBarCode">The couponBarCode.</param>
        /// <param name="cartID">The cartID.</param>
        /// <param name="cartVersion">The cartVersion.</param>
        /// <returns>string object.</returns>
        public async Task<string> VoidGKCoupon(string couponBarCode, string cartID, long cartVersion)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "GKCouponCheckEntity",
                "GKCouponCheckEntity",
                "VoidGKCoupon",
                true, null, OperationParameter.Create("CouponBarCode", couponBarCode, false),
                  OperationParameter.Create("CartID", cartID, false),
                  OperationParameter.Create("CartVersion", cartVersion, false));
        }
        
        /// <summary>
        /// LMSIDSave method.
        /// </summary>
        /// <param name="lMSID">The lMSID.</param>
        /// <param name="aPoints">The aPoints.</param>
        /// <param name="rPoints">The rPoints.</param>
        /// <param name="receiptID">The receiptID.</param>
        /// <returns>string object.</returns>
        public async Task<string> LMSIDSave(string lMSID, string aPoints, string rPoints, string receiptID)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "GKCouponCheckEntity",
                "GKCouponCheckEntity",
                "LMSIDSave",
                true, null, OperationParameter.Create("LMSID", lMSID, false),
                  OperationParameter.Create("APoints", aPoints, false),
                  OperationParameter.Create("RPoints", rPoints, false),
                  OperationParameter.Create("ReceiptID", receiptID, false));
        }
        
    }
    
    /// <summary>
    /// Class implements GKOfflineTransactionEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class GKOfflineTransactionEntityManager : IGKOfflineTransactionEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="GKOfflineTransactionEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public GKOfflineTransactionEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<GKOfflineTransactionEntity> Create(GKOfflineTransactionEntity entity)
        {
            return await this.context.Create<GKOfflineTransactionEntity>("GKOfflineTransactionEntity", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<GKOfflineTransactionEntity> Read(int id, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<GKOfflineTransactionEntity>(
                    "GKOfflineTransactionEntity",
                    e => e.Id == id,
                    expandProperties,
                    OperationParameter.Create("Id", id, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<GKOfflineTransactionEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<GKOfflineTransactionEntity>("GKOfflineTransactionEntity", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<GKOfflineTransactionEntity> Update(GKOfflineTransactionEntity entity)
        {
            return await this.context.Update<GKOfflineTransactionEntity>("GKOfflineTransactionEntity", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(GKOfflineTransactionEntity entity)
        {
            await this.context.Delete<GKOfflineTransactionEntity>("GKOfflineTransactionEntity", entity);
        }
        
        // Operations
        
        /// <summary>
        /// GetOffLineTransactions method.
        /// </summary>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of GKOfflineTransactionEntity.</returns>
        public async Task<PagedResult<GKOfflineTransactionEntity>> GetOffLineTransactions(QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<GKOfflineTransactionEntity>(
                "GKOfflineTransactionEntity",
                "GKOfflineTransactionEntity",
                "GetOffLineTransactions",
                true, queryResultSettings, null);
        }
        
    }
    
    /// <summary>
    /// Class implements GKMemberEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Confiz.Commerce.RetailProxy.Extension", "1.0")]
    internal class GKMemberEntityManager : IGKMemberEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="GKMemberEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public GKMemberEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<GKMemberEntity> Create(GKMemberEntity entity)
        {
            return await this.context.Create<GKMemberEntity>("GKMemberEntity", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<GKMemberEntity> Read(long id, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<GKMemberEntity>(
                    "GKMemberEntity",
                    e => e.Id == id,
                    expandProperties,
                    OperationParameter.Create("Id", id, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<GKMemberEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<GKMemberEntity>("GKMemberEntity", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<GKMemberEntity> Update(GKMemberEntity entity)
        {
            return await this.context.Update<GKMemberEntity>("GKMemberEntity", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(GKMemberEntity entity)
        {
            await this.context.Delete<GKMemberEntity>("GKMemberEntity", entity);
        }
        
        // Operations
        
        /// <summary>
        /// IfGKMemberExists method.
        /// </summary>
        /// <param name="customerIdBarCode">The customerIdBarCode.</param>
        /// <param name="transId">The transId.</param>
        /// <param name="staffId">The staffId.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of GKMemberEntity.</returns>
        public async Task<PagedResult<GKMemberEntity>> IfGKMemberExists(string customerIdBarCode, string transId, string staffId, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<GKMemberEntity>(
                "GKMemberEntity",
                "GKMemberEntity",
                "IfGKMemberExists",
                true, queryResultSettings, null, OperationParameter.Create("customerIdBarCode", customerIdBarCode, false),
                  OperationParameter.Create("transId", transId, false),
                  OperationParameter.Create("staffId", staffId, false));
        }
        
    }
    
 }
